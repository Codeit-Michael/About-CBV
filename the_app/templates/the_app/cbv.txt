ListView
-shows all the object

	class TaskList(ListView):
		model = Task
		template_name = 'base/tasks.html'
		context_object_name = 'tasks'
		paginate_by = 5
		ordering = ['-date_created']

*model - source model
*template_name - for templating
*context_object_name - naming the context, in function based:
	context = {'contextName':contextName}
*paginate_by & ordering - The list view also has pagination and ordering already built in. We can set these methods by setting their attributes like I did in the code sample above.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DetailView
-shows all the details/information about the object

	class TaskDetail(DetailView):
		 model = Task
		 template_name = 'base/task.html'
		 context_object_name = 'task'
		 pk_url_kwarg = 'custom_pk'

*pk_url_kwarg - By default the view looks for a primary key in the url called “pk” or a slug field called “slug”. Both of these values can be customized with slug_field or “pk_url_kwarg”


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CreateView
-View for creating a new object, with a response rendered by a template.
-Can only create through 

	class PersonCreate(CreateView):
		model = Person
		fields = ['name']  # Can used instead of "form_class"
		# form_class = PersonForm  # Can be used of "fields"
		context_object_name = 'person'
		success_url = reverse_lazy('personlist')
		template_name = 'the_app/person_create.html' # matic person_form.html

*form_class - By default this view creates a model form for us based on the model we specify. As you can see in the example if we don't specify a model form to use, one will be created by fail for us after we specify the field names. We can use our own model form by creating a mode for and setting the “form_class attribute”.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
UpdateView
-This view by default follows the same template_naming convention and form principles as the create view. Both views will look for the same form and template unless otherwise specified.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DeleteView
-as what it has on its name, for deleting objects

	class PersonDelete(DeleteView):
		model = Person
		# default template_name "person_confirm_delete.html"
		success_url = reverse_lazy('personlist')

	--person_confirm_delete.html
	<!DOCTYPE html>
	<html>
		<head>
			<title>Delete Confirmation</title>
		</head>
		<body>
			<form method="post">{% csrf_token %}
				<p>Are you sure you want to delete "{{object}}"?</p>
				<input type="submit" value="Confirm">
			</form>
		</body>
	</html>

Notice that default template_name is starts person, default name is always based on Model name
ex: we got Person so it named its default template person_confirm_delete


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The "dispatch()"
-The method you can use to get the request and broke down the objects

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
FormView

class UserSignup(FormView):
	template_name = 'the_app/signup.html'
	form_class = UserCreationForm
	redirect_authenticated_user = True
	success_url = reverse_lazy('signin')

	# automatic login after making an account
	def form_valid(self, form):
		user = form.save()
		if user is not None:
			login(self.request, user)
		return super(UserSignup, self).form_valid(form)

	# to not access this signup() when you where logged in already
	def get(self, *args, **kwargs):
		if self.request.user.is_authenticated:
			return redirect('personlist')
		return super(UserSignup, self).get(*args, **kwargs)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
LoginView

class UserLogin(LoginView):
	template_name = 'the_app/signin.html'
	fields = '__all__'
	redirect_authenticated_user = True

	def get_success_url(self):
		return reverse_lazy('personlist')

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
LogoutView (shortcut)

on your urls.py:
from django.contrib.auth import LogoutView

urlpatterns = [
	path('signin/', UserLogin.as_view(), name='signin'),
	# LogoutView shortcut
	path('signout/', LogoutView.as_view(next_page='signin'), name='signout'),
]